{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Platform, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\nimport NativeLinking from \"./ExpoLinking\";\nimport { hasCustomScheme, resolveScheme } from \"./Schemes\";\nfunction validateURL(url) {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\nfunction getHostUri() {\n  var _Constants$manifest, _Constants$manifest2;\n  if ((_Constants$manifest = Constants.manifest) != null && _Constants$manifest.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (!((_Constants$manifest2 = Constants.manifest) != null && _Constants$manifest2.hostUri) && !hasCustomScheme()) {\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\nfunction isExpoHosted() {\n  var _Constants$manifest3;\n  var hostUri = getHostUri();\n  return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) || (_Constants$manifest3 = Constants.manifest) != null && _Constants$manifest3.developer));\n}\nfunction removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\nfunction removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\nfunction removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\nfunction removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\nfunction ensureLeadingSlash(input, shouldAppend) {\n  var hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return input + \"/\";\n  }\n  return input;\n}\nfunction ensureTrailingSlash(input, shouldAppend) {\n  var hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return \"/\" + input;\n  }\n  return input;\n}\nexport function makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 ? arguments[1] : undefined;\n  var scheme = arguments.length > 2 ? arguments[2] : undefined;\n  return createURL(path, {\n    queryParams: queryParams,\n    scheme: scheme,\n    isTripleSlashed: true\n  });\n}\nexport function createURL(path) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    scheme = _ref.scheme,\n    _ref$queryParams = _ref.queryParams,\n    queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n    _ref$isTripleSlashed = _ref.isTripleSlashed,\n    isTripleSlashed = _ref$isTripleSlashed === void 0 ? false : _ref$isTripleSlashed;\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n    var origin = ensureLeadingSlash(window.location.origin, false);\n    var _queryString = qs.stringify(queryParams);\n    if (_queryString) {\n      _queryString = \"?\" + _queryString;\n    }\n    var outputPath = path;\n    if (outputPath) outputPath = ensureTrailingSlash(path, true);\n    return encodeURI(\"\" + origin + outputPath + _queryString);\n  }\n  var resolvedScheme = resolveScheme({\n    scheme: scheme\n  });\n  var hostUri = getHostUri() || '';\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = \"/--/\" + removeLeadingSlash(path);\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = \"/\" + path;\n    }\n  } else {\n    path = '';\n  }\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n    try {\n      var parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = \"?\" + queryString;\n  }\n  hostUri = ensureTrailingSlash(hostUri, !isTripleSlashed);\n  return encodeURI(resolvedScheme + \":\" + (isTripleSlashed ? '/' : '') + \"/\" + hostUri + path + queryString);\n}\nexport function parse(url) {\n  validateURL(url);\n  var parsed = URL(url, true);\n  for (var param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]);\n  }\n  var queryParams = parsed.query;\n  var hostUri = getHostUri() || '';\n  var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n  var path = parsed.pathname || null;\n  var hostname = parsed.hostname || null;\n  var scheme = parsed.protocol || null;\n  if (scheme) {\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n  if (path) {\n    path = removeLeadingSlash(path);\n    var expoPrefix = null;\n    if (hostUriStripped) {\n      var parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n  return {\n    hostname: hostname,\n    path: path,\n    queryParams: queryParams,\n    scheme: scheme\n  };\n}\nexport function addEventListener(type, handler) {\n  NativeLinking.addEventListener(type, handler);\n}\nexport function removeEventListener(type, handler) {\n  NativeLinking.removeEventListener(type, handler);\n}\nexport function parseInitialURLAsync() {\n  var initialUrl;\n  return _regeneratorRuntime.async(function parseInitialURLAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n        case 2:\n          initialUrl = _context.sent;\n          if (initialUrl) {\n            _context.next = 5;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            scheme: null,\n            hostname: null,\n            path: null,\n            queryParams: null\n          });\n        case 5:\n          return _context.abrupt(\"return\", parse(initialUrl));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function sendIntent(action, extras) {\n  return _regeneratorRuntime.async(function sendIntent$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context2.next = 4;\n            break;\n          }\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.sendIntent(action, extras));\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n          throw new UnavailabilityError('Linking', 'sendIntent');\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function openSettings() {\n  return _regeneratorRuntime.async(function openSettings$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'web')) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Linking', 'openSettings');\n        case 2:\n          if (!NativeLinking.openSettings) {\n            _context3.next = 6;\n            break;\n          }\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(NativeLinking.openSettings());\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(openURL('app-settings:'));\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getInitialURL() {\n  var _await$NativeLinking$;\n  return _regeneratorRuntime.async(function getInitialURL$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n        case 2:\n          _context4.t0 = _await$NativeLinking$ = _context4.sent;\n          if (!(_context4.t0 != null)) {\n            _context4.next = 7;\n            break;\n          }\n          _context4.t1 = _await$NativeLinking$;\n          _context4.next = 8;\n          break;\n        case 7:\n          _context4.t1 = null;\n        case 8:\n          return _context4.abrupt(\"return\", _context4.t1);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function openURL(url) {\n  return _regeneratorRuntime.async(function openURL$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          validateURL(url);\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.openURL(url));\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function canOpenURL(url) {\n  return _regeneratorRuntime.async(function canOpenURL$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          validateURL(url);\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(NativeLinking.canOpenURL(url));\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function useUrl() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    url = _useState2[0],\n    setLink = _useState2[1];\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    addEventListener('url', onChange);\n    return function () {\n      return removeEventListener('url', onChange);\n    };\n  }, []);\n  return url;\n}\nexport * from \"./Linking.types\";","map":{"version":3,"mappings":"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","names":["Platform","UnavailabilityError","Constants","invariant","qs","useEffect","useState","URL","NativeLinking","hasCustomScheme","resolveScheme","validateURL","url","getHostUri","manifest","hostUri","removeScheme","linkingUri","replace","isExpoHosted","test","developer","removePort","removeLeadingSlash","removeTrailingSlashAndQueryString","ensureLeadingSlash","input","shouldAppend","hasSlash","endsWith","substring","length","ensureTrailingSlash","startsWith","makeUrl","path","queryParams","scheme","createURL","isTripleSlashed","OS","isDOMAvailable","origin","window","location","queryString","stringify","outputPath","encodeURI","resolvedScheme","queryStringMatchResult","match","paramsFromHostUri","parsedParams","parse","e","parsed","param","query","decodeURIComponent","hostUriStripped","pathname","hostname","protocol","expoPrefix","parts","split","slice","concat","join","indexOf","addEventListener","type","handler","removeEventListener","parseInitialURLAsync","getInitialURL","initialUrl","sendIntent","action","extras","openSettings","openURL","canOpenURL","useUrl","setLink","onChange","event","then"],"sourceRoot":"","sources":["../src/Linking.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport { ParsedURL, QueryParams, URLListener } from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (!Constants.manifest?.hostUri && !hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * **Examples**\n *\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object of parameters that will be converted into a query string.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the Expo config (app.config.js or app.json) under `expo.scheme`.\n *\n * **Examples**\n *\n * - Bare: `<scheme>://path` -- uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param scheme URI protocol `<scheme>://` that must be built into your native app.\n * @param queryParams An object of parameters that will be converted into a query string.\n */\nexport function createURL(\n  path: string,\n  {\n    scheme,\n    queryParams = {},\n    isTripleSlashed = false,\n  }: {\n    scheme?: string;\n    queryParams?: QueryParams;\n    isTripleSlashed?: boolean;\n  } = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureLeadingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureTrailingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureTrailingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n/**\n * Returns the components and query parameters for a given URL.\n *\n * @param url Input URL to parse\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts\n        .slice(1)\n        .concat(['--/'])\n        .join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n/**\n * Add a handler to Linking changes by listening to the `url` event type\n * and providing the handler\n *\n * See https://reactnative.dev/docs/linking.html#addeventlistener\n */\nexport function addEventListener(type: string, handler: URLListener) {\n  NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n *\n * See https://reactnative.dev/docs/linking.html#removeeventlistener\n */\nexport function removeEventListener(type: string, handler: URLListener) {\n  NativeLinking.removeEventListener(type, handler);\n}\n\n/**\n * **Native:** Parses the link that opened the app. If no link opened the app, all the fields will be \\`null\\`.\n * **Web:** Parses the current window URL.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n/**\n * Launch an Android intent with optional extras\n *\n * @platform android\n */\nexport async function sendIntent(\n  action: string,\n  extras?: { key: string; value: string | number | boolean }[]\n): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n/**\n * Attempt to open the system settings for an the app.\n *\n * @platform ios\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n/**\n * If the app launch was triggered by an app link,\n * it will give the link url, otherwise it will give `null`\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n/**\n * Try to open the given `url` with any of the installed apps.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns true because there is no API for detecting what URLs can be opened.\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n */\nexport function useUrl(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then(url => setLink(url));\n    addEventListener('url', onChange);\n    return () => removeEventListener('url', onChange);\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\n"]},"metadata":{},"sourceType":"module"}