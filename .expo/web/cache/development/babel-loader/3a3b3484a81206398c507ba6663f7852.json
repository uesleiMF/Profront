{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, UnavailabilityError } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\" + getNativeFontName(fontFamily);\n}\nexport function isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function loadAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (!(typeof fontFamilyOrFontMap === 'object')) {\n          _context.next = 8;\n          break;\n        }\n        if (!source) {\n          _context.next = 3;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n      case 3:\n        fontMap = fontFamilyOrFontMap;\n        names = Object.keys(fontMap);\n        _context.next = 7;\n        return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n          return loadFontInNamespaceAsync(name, fontMap[name]);\n        })));\n      case 7:\n        return _context.abrupt(\"return\");\n      case 8:\n        _context.next = 10;\n        return _regeneratorRuntime.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n      case 10:\n        return _context.abrupt(\"return\", _context.sent);\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction loadFontInNamespaceAsync(fontFamily, source) {\n  var asset;\n  return _regeneratorRuntime.async(function loadFontInNamespaceAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (source) {\n          _context3.next = 2;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n      case 2:\n        if (!loaded[fontFamily]) {\n          _context3.next = 4;\n          break;\n        }\n        return _context3.abrupt(\"return\");\n      case 4:\n        if (!loadPromises[fontFamily]) {\n          _context3.next = 6;\n          break;\n        }\n        return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n      case 6:\n        asset = getAssetForSource(source);\n        loadPromises[fontFamily] = function _callee() {\n          return _regeneratorRuntime.async(function _callee$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(loadSingleFontAsync(fontFamily, asset));\n              case 3:\n                loaded[fontFamily] = true;\n              case 4:\n                _context2.prev = 4;\n                delete loadPromises[fontFamily];\n                return _context2.finish(4);\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, null, null, [[0,, 4, 7]], Promise);\n        }();\n        _context3.next = 10;\n        return _regeneratorRuntime.awrap(loadPromises[fontFamily]);\n      case 10:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAllAsync() {\n  var _i, _Object$keys, fontFamily;\n  return _regeneratorRuntime.async(function unloadAllAsync$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (ExpoFontLoader.unloadAllAsync) {\n          _context4.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n      case 2:\n        if (!Object.keys(loadPromises).length) {\n          _context4.next = 4;\n          break;\n        }\n        throw new CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n      case 4:\n        for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n          fontFamily = _Object$keys[_i];\n          delete loaded[fontFamily];\n        }\n        _context4.next = 7;\n        return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAllAsync());\n      case 7:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAsync(fontFamilyOrFontMap, options) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function unloadAsync$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        if (ExpoFontLoader.unloadAsync) {\n          _context5.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('expo-font', 'unloadAsync');\n      case 2:\n        if (!(typeof fontFamilyOrFontMap === 'object')) {\n          _context5.next = 10;\n          break;\n        }\n        if (!options) {\n          _context5.next = 5;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n      case 5:\n        fontMap = fontFamilyOrFontMap;\n        names = Object.keys(fontMap);\n        _context5.next = 9;\n        return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        })));\n      case 9:\n        return _context5.abrupt(\"return\");\n      case 10:\n        _context5.next = 12;\n        return _regeneratorRuntime.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n      case 12:\n        return _context5.abrupt(\"return\", _context5.sent);\n      case 13:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction unloadFontInNamespaceAsync(fontFamily, options) {\n  var nativeFontName;\n  return _regeneratorRuntime.async(function unloadFontInNamespaceAsync$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        if (loaded[fontFamily]) {\n          _context6.next = 4;\n          break;\n        }\n        return _context6.abrupt(\"return\");\n      case 4:\n        delete loaded[fontFamily];\n      case 5:\n        nativeFontName = getNativeFontName(fontFamily);\n        if (nativeFontName) {\n          _context6.next = 8;\n          break;\n        }\n        throw new CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n      case 8:\n        _context6.next = 10;\n        return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAsync(nativeFontName, options));\n      case 10:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport { FontDisplay };","map":{"version":3,"mappings":"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","names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","loadFontInNamespaceAsync","name","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sourceRoot":"","sources":["../src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n *\n * @param fontFamily name to process\n * @returns a name processed for use with the [current workflow](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/)\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n/**\n * Natively load a font for use with Text elements.\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style) style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises[fontFamily]) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n/**\n * Unloads all of the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap the names of the custom fonts that will be unloaded.\n * @param source when `fontFamilyOrFontMap` is a string, this should be the font source used to load the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: UnloadFontOptions },\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"module"}