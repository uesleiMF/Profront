{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationActions } from 'react-navigation';\nvar DrawerSidebar = function (_React$PureComponent) {\n  _inherits(DrawerSidebar, _React$PureComponent);\n  var _super = _createSuper(DrawerSidebar);\n  function DrawerSidebar() {\n    var _this;\n    _classCallCheck(this, DrawerSidebar);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"getScreenOptions\", function (routeKey) {\n      var descriptor = _this.props.descriptors[routeKey];\n      if (!descriptor.options) {\n        throw new Error('Cannot access screen descriptor options from drawer sidebar');\n      }\n      return descriptor.options;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getLabel\", function (_ref) {\n      var focused = _ref.focused,\n        tintColor = _ref.tintColor,\n        route = _ref.route;\n      var _this$getScreenOption = _this.getScreenOptions(route.key),\n        drawerLabel = _this$getScreenOption.drawerLabel,\n        title = _this$getScreenOption.title;\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerLabel;\n      }\n      if (typeof title === 'string') {\n        return title;\n      }\n      return route.routeName;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderIcon\", function (_ref2) {\n      var focused = _ref2.focused,\n        tintColor = _ref2.tintColor,\n        route = _ref2.route;\n      var _this$getScreenOption2 = _this.getScreenOptions(route.key),\n        drawerIcon = _this$getScreenOption2.drawerIcon;\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerIcon;\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleItemPress\", function (_ref3) {\n      var route = _ref3.route,\n        focused = _ref3.focused;\n      if (focused) {\n        _this.props.navigation.closeDrawer();\n      } else {\n        _this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: route.routeName\n        }));\n      }\n    });\n    return _this;\n  }\n  _createClass(DrawerSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var ContentComponent = this.props.contentComponent;\n      if (!ContentComponent) {\n        return null;\n      }\n      var state = this.props.navigation.state;\n      if (typeof state.index !== 'number') {\n        throw new Error('The index of the route should be state in the navigation state');\n      }\n      return React.createElement(View, {\n        style: [styles.container, this.props.style]\n      }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        drawerOpenProgress: this.props.drawerOpenProgress,\n        items: state.routes,\n        activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n        screenProps: this.props.screenProps,\n        getLabel: this.getLabel,\n        renderIcon: this.renderIcon,\n        onItemPress: this.handleItemPress,\n        drawerPosition: this.props.drawerPosition\n      })));\n    }\n  }]);\n  return DrawerSidebar;\n}(React.PureComponent);\nexport default DrawerSidebar;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","NavigationActions","DrawerSidebar","args","_defineProperty","routeKey","descriptor","props","descriptors","options","Error","focused","tintColor","route","getScreenOptions","key","drawerLabel","title","routeName","drawerIcon","navigation","closeDrawer","dispatch","navigate","render","ContentComponent","contentComponent","state","index","View","style","styles","container","contentOptions","drawerOpenProgress","items","routes","activeItemKey","screenProps","getLabel","renderIcon","onItemPress","handleItemPress","drawerPosition","PureComponent","StyleSheet","create","flex"],"sources":["DrawerSidebar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      // @ts-ignore\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}