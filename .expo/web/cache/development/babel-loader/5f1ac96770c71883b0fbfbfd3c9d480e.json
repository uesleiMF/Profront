{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ReanimatedEventEmitter from \"./ReanimatedEventEmitter\";\nimport AnimatedEvent from \"./core/AnimatedEvent\";\nimport AnimatedNode from \"./core/AnimatedNode\";\nimport AnimatedValue from \"./core/AnimatedValue\";\nimport { createOrReusePropsNode } from \"./core/AnimatedProps\";\nimport invariant from 'fbjs/lib/invariant';\nvar NODE_MAPPING = new Map();\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\nfunction dummyListener() {}\nexport default function createAnimatedComponent(Component) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n    var _super = _createSuper(AnimatedComponent);\n    function AnimatedComponent(props) {\n      var _this;\n      _classCallCheck(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"_invokeAnimatedPropsCallbackOnMount\", false);\n      _defineProperty(_assertThisInitialized(_this), \"_animatedPropsCallback\", function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_setComponentRef\", function (c) {\n        if (c !== _this._component) {\n          _this._component = c;\n        }\n      });\n      _this._attachProps(_this.props);\n      return _this;\n    }\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n        this._propsAnimated && this._propsAnimated.__detach();\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        this._component.setNativeProps(props);\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n          this._animatedPropsCallback();\n        }\n        this._propsAnimated.setNativeView(this._component);\n        this._attachNativeEvents();\n        this._attachPropUpdater();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (prop instanceof AnimatedEvent) {\n            prop.attachEvent(node, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (prop instanceof AnimatedEvent) {\n            prop.detachEvent(node, key);\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n        var attached = new Set();\n        var nextEvts = new Set();\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (prop instanceof AnimatedEvent) {\n            nextEvts.add(prop.__nodeID);\n          }\n        }\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n          if (_prop instanceof AnimatedEvent) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          }\n        }\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n          if (_prop2 instanceof AnimatedEvent && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        this._component.setNativeProps(props);\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.set(viewTag, this);\n        if (NODE_MAPPING.size === 1) {\n          ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.delete(viewTag);\n        if (NODE_MAPPING.size === 0) {\n          ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n        this._reattachNativeEvents(prevProps);\n        this._propsAnimated.setNativeView(this._component);\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n          if (key !== 'transform') {\n            if (value instanceof AnimatedValue) {\n              style[key] = value._startingValue;\n            } else if (!(value instanceof AnimatedNode)) {\n              style[key] = value;\n            }\n          }\n        }\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var props = {};\n        for (var key in inputProps) {\n          var value = inputProps[key];\n          if (key === 'style') {\n            props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n          } else if (value instanceof AnimatedEvent) {\n            props[key] = dummyListener;\n          } else if (value instanceof AnimatedValue) {\n            props[key] = value._startingValue;\n          } else if (!(value instanceof AnimatedNode)) {\n            props[key] = value;\n          }\n        }\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps));\n      }\n    }, {\n      key: \"getNode\",\n      value: function getNode() {\n        return this._component;\n      }\n    }]);\n    return AnimatedComponent;\n  }(React.Component);\n  AnimatedComponent.displayName = \"AnimatedComponent(\".concat(Component.displayName || Component.name || 'Component', \")\");\n  return AnimatedComponent;\n}","map":{"version":3,"mappings":"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","names":["React","ReanimatedEventEmitter","AnimatedEvent","AnimatedNode","AnimatedValue","createOrReusePropsNode","invariant","NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","dummyListener","createAnimatedComponent","Component","prototype","isReactComponent","AnimatedComponent","constructor","_defineProperty","_component","_invokeAnimatedPropsCallbackOnMount","setNativeProps","forceUpdate","_propsAnimated","__getValue","c","_attachProps","componentWillUnmount","_detachPropUpdater","__detach","_detachNativeEvents","componentDidMount","_animatedPropsCallback","setNativeView","_attachNativeEvents","_attachPropUpdater","_getEventViewRef","getScrollableNode","node","key","prop","attachEvent","detachEvent","_reattachNativeEvents","prevProps","attached","Set","nextEvts","add","__nodeID","has","nextProps","oldPropsAnimated","findNodeHandle","set","size","addListener","delete","removeAllListeners","componentDidUpdate","_filterNonAnimatedStyle","inputStyle","style","value","_startingValue","_filterNonAnimatedProps","inputProps","StyleSheet","flatten","render","platformProps","Platform","select","web","default","collapsable","ref","_setComponentRef","getNode","displayName","name"],"sources":["createAnimatedComponent.js"],"sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedNode from './core/AnimatedNode';\nimport AnimatedValue from './core/AnimatedValue';\nimport { createOrReusePropsNode } from './core/AnimatedProps';\n\nimport invariant from 'fbjs/lib/invariant';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    setNativeProps(props) {\n      this._component.setNativeProps(props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        }\n      }\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      this._component.setNativeProps(props);\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = c => {\n      if (c !== this._component) {\n        this._component = c;\n      }\n    };\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (key !== 'transform') {\n          if (value instanceof AnimatedValue) {\n            style[key] = value._startingValue;\n          } else if (!(value instanceof AnimatedNode)) {\n            style[key] = value;\n          }\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (value instanceof AnimatedValue) {\n          props[key] = value._startingValue;\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n\n    // A third party library can use getNode()\n    // to get the node reference of the decorated component\n    getNode() {\n      return this._component;\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName ||\n    Component.name ||\n    'Component'})`;\n\n  return AnimatedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}