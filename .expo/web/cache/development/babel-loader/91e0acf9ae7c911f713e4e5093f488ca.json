{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\nvar DrawerNavigatorItems = function (_React$Component) {\n  _inherits(DrawerNavigatorItems, _React$Component);\n  var _super = _createSuper(DrawerNavigatorItems);\n  function DrawerNavigatorItems() {\n    var _this;\n    _classCallCheck(this, DrawerNavigatorItems);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n    return _this;\n  }\n  _createClass(DrawerNavigatorItems, [{\n    key: \"getActiveTintColor\",\n    value: function getActiveTintColor() {\n      var activeTintColor = this.props.activeTintColor;\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n      return activeTintColor[this.context];\n    }\n  }, {\n    key: \"getInactiveTintColor\",\n    value: function getInactiveTintColor() {\n      var inactiveTintColor = this.props.inactiveTintColor;\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n      return inactiveTintColor[this.context];\n    }\n  }, {\n    key: \"getActiveBackgroundColor\",\n    value: function getActiveBackgroundColor() {\n      var activeBackgroundColor = this.props.activeBackgroundColor;\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n      return activeBackgroundColor[this.context];\n    }\n  }, {\n    key: \"getInactiveBackgroundColor\",\n    value: function getInactiveBackgroundColor() {\n      var inactiveBackgroundColor = this.props.inactiveBackgroundColor;\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n      return inactiveBackgroundColor[this.context];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        items = _this$props.items,\n        activeItemKey = _this$props.activeItemKey,\n        getLabel = _this$props.getLabel,\n        renderIcon = _this$props.renderIcon,\n        onItemPress = _this$props.onItemPress,\n        itemsContainerStyle = _this$props.itemsContainerStyle,\n        itemStyle = _this$props.itemStyle,\n        labelStyle = _this$props.labelStyle,\n        activeLabelStyle = _this$props.activeLabelStyle,\n        inactiveLabelStyle = _this$props.inactiveLabelStyle,\n        iconContainerStyle = _this$props.iconContainerStyle,\n        drawerPosition = _this$props.drawerPosition;\n      var activeTintColor = this.getActiveTintColor();\n      var activeBackgroundColor = this.getActiveBackgroundColor();\n      var inactiveTintColor = this.getInactiveTintColor();\n      var inactiveBackgroundColor = this.getInactiveBackgroundColor();\n      return React.createElement(View, {\n        style: [styles.container, itemsContainerStyle]\n      }, items.map(function (route, index) {\n        var _forceInset;\n        var focused = activeItemKey === route.key;\n        var color = focused ? activeTintColor : inactiveTintColor;\n        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused,\n          tintColor: color\n        };\n        var icon = renderIcon(scene);\n        var label = getLabel(scene);\n        var accessibilityLabel = typeof label === 'string' ? label : undefined;\n        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return React.createElement(TouchableItem, {\n          key: route.key,\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            onItemPress({\n              route: route,\n              focused: focused\n            });\n          },\n          delayPressIn: 0\n        }, React.createElement(SafeAreaView, {\n          style: [{\n            backgroundColor: backgroundColor\n          }, styles.item, itemStyle],\n          forceInset: (_forceInset = {}, _defineProperty2(_forceInset, drawerPosition, 'always'), _defineProperty2(_forceInset, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty2(_forceInset, \"vertical\", 'never'), _forceInset)\n        }, icon ? React.createElement(View, {\n          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]\n        }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle, extraLabelStyle]\n        }, label) : label));\n      }));\n    }\n  }]);\n  return DrawerNavigatorItems;\n}(React.Component);\nexport { DrawerNavigatorItems as default };\n_defineProperty(DrawerNavigatorItems, \"defaultProps\", {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: {\n    light: 'transparent',\n    dark: 'transparent'\n  }\n});\n_defineProperty(DrawerNavigatorItems, \"contextType\", ThemeContext);\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaView","ThemeContext","TouchableItem","DrawerNavigatorItems","args","_defineProperty","getActiveTintColor","activeTintColor","props","context","getInactiveTintColor","inactiveTintColor","getActiveBackgroundColor","activeBackgroundColor","getInactiveBackgroundColor","inactiveBackgroundColor","render","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","View","style","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","accessible","onPress","delayPressIn","item","forceInset","inactiveIcon","Text","Component","light","dark","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"sources":["DrawerNavigatorItems.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}