{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nvar AnimatedAlways = function (_AnimatedNode) {\n  _inherits(AnimatedAlways, _AnimatedNode);\n  var _super = _createSuper(AnimatedAlways);\n  function AnimatedAlways(what) {\n    var _this;\n    _classCallCheck(this, AnimatedAlways);\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.always node argument should be of type AnimatedNode but got \".concat(what));\n    _this = _super.call(this, {\n      type: 'always',\n      what: what\n    }, [what]);\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n    _this._what = what;\n    return _this;\n  }\n  _createClass(AnimatedAlways, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedAlways, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.__getValue();\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      val(this._what);\n      return 0;\n    }\n  }]);\n  return AnimatedAlways;\n}(AnimatedNode);\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AAAA,IAEMC,cAAN;EAAA;EAAA;EAGEC,wBAAYC,IAAD,EAAO;IAAA;IAAA;IAChBJ,SAAS,CACPI,IAAI,YAAYL,YADT,6FAE6EK,IAF7E,EAAT;IAIA,0BAAM;MAAEC,IAAI,EAAE,QAAR;MAAkBD;IAAlB,CAAN,EAAgC,CAACA,IAAD,CAAhC;IALgBE;IAMhB,MAAKC,KAAL,GAAaH,IAAb;IAAA;EACD;EAAA;IAAA;IAAA,OAEDI,oBAAW;MACT,qCAA8B,KAAKC,QAAnC;IACD;EAAA;IAAA;IAAA,OAEDC,kBAAS;MACP,KAAKC,UAAL;IACD;EAAA;IAAA;IAAA,OAEDC,wBAAe;MACbX,GAAG,CAAC,KAAKM,KAAN,CAAH;MACA,OAAO,CAAP;IACD;EAAA;EAAA;AAAA,EAvB0BR,YAA7B;AA0BA,OAAO,SAASc,oBAAT,CAA8BC,IAA9B,EAAoC;EACzC,OAAO,IAAIZ,cAAJ,CAAmBY,IAAnB,CAAP;AACD","names":["AnimatedNode","invariant","val","AnimatedAlways","constructor","what","type","_defineProperty","_what","toString","__nodeID","update","__getValue","__onEvaluate","createAnimatedAlways","item"],"sources":["AnimatedAlways.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\n\nclass AnimatedAlways extends AnimatedNode {\n  _what;\n\n  constructor(what) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`\n    );\n    super({ type: 'always', what }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return `AnimatedAlways, id: ${this.__nodeID}`;\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}\n"]},"metadata":{},"sourceType":"module"}