{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { createNavigator, ThemeColors, SafeAreaView } from 'react-navigation';\nimport DrawerRouter from \"../routers/DrawerRouter\";\nimport DrawerView from \"../views/DrawerView\";\nimport DrawerItems from \"../views/DrawerNavigatorItems\";\nvar defaultContentComponent = function defaultContentComponent(props) {\n  return React.createElement(ScrollView, {\n    alwaysBounceVertical: false\n  }, React.createElement(SafeAreaView, {\n    forceInset: {\n      top: 'always',\n      horizontal: 'never'\n    }\n  }, React.createElement(DrawerItems, props)));\n};\nvar DefaultDrawerConfig = {\n  drawerWidth: function drawerWidth() {\n    var _Dimensions$get = Dimensions.get('window'),\n      height = _Dimensions$get.height,\n      width = _Dimensions$get.width;\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)'\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n};\nvar DrawerNavigator = function DrawerNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mergedConfig = _objectSpread(_objectSpread({}, DefaultDrawerConfig), config);\n  var drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n  var navigator = createNavigator(DrawerView, drawerRouter, mergedConfig);\n  return navigator;\n};\nexport default DrawerNavigator;","map":{"version":3,"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAAA;AAEA,SACEC,eADF,EAEEC,WAFF,EAGEC,YAHF,QAOO,kBAPP;AAQA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AASA,IAAMC,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,KAAD;EAAA,OAC9BR,oBAACS,UAAD;IAAYC,oBAAoB,EAAE;EAAlC,GACEV,oBAACG,YAAD;IAAcQ,UAAU,EAAE;MAAEC,GAAG,EAAE,QAAP;MAAiBC,UAAU,EAAE;IAA7B;EAA1B,GACEb,oBAACM,WAAD,EAAiBE,KAAjB,CADF,CADF,CADF;AAAA;AAQA,IAAMM,mBAA2C,GAAG;EAClDC,WAAW,EAAE,uBAAM;IAAA,sBAMSC,UAAU,CAACC,GAAX,CAAe,QAAf,CAA1B;MAAQC,MAAF,mBAAEA,MAAF;MAAUC;IAChB,IAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,KAAjB,CAAxB;IACA,IAAMI,WAAW,GAAGJ,KAAK,GAAGD,MAA5B;IACA,IAAMM,QAAQ,GAAGJ,eAAe,IAAI,GAApC;IACA,IAAMK,YAAY,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAyBJ,WAAW,GAAG,EAAH,GAAQ,EAA5C,GAAkD,EAAvE;IACA,IAAMK,QAAQ,GAAGJ,QAAQ,GAAG,GAAH,GAAS,GAAlC;IAEA,OAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCG,QAAzC,CAAP;EACD,CAfiD;EAgBlDC,gBAAgB,EAAEtB,uBAhBgC;EAiBlDuB,cAAc,EAAEC,WAAW,CAACC,KAAZ,GAAoB,OAApB,GAA8B,MAjBI;EAkBlDC,mBAAmB,EAAE,SAlB6B;EAmBlDC,qBAAqB,EAAE;IACrBC,KAAK,EAAEjC,WAAW,CAACiC,KAAZ,CAAkBC,WADJ;IAErBC,IAAI,EAAEnC,WAAW,CAACmC,IAAZ,CAAiBD;EAFF,CAnB2B;EAuBlDE,YAAY,EAAE;IACZH,KAAK,EAAE,oBADK;IAEZE,IAAI,EAAE;EAFM,CAvBoC;EA2BlDE,UAAU,EAAE,OA3BsC;EA4BlDC,aAAa,EAAE,KA5BmC;EA6BlDC,kBAAkB,EAAE;AA7B8B,CAApD;AAgCA,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CACnBC,YADsB,EAWnB;EAAA,IANHC,MAKC,uEAAG,EAVkB;EAYtB,IAAMC,YAAY,mCAAQ/B,mBAAL,GAA6B8B,OAAlD;EACA,IAAME,YAAY,GAAG1C,YAAY,CAACuC,YAAD,EAAeE,YAAf,CAAjC;EAGA,IAAME,SAAS,GAAG9C,eAAe,CAC/BI,UAD+B,EAE/ByC,YAF+B,EAG/BD,YAH+B,CAAjC;EAKA,OAAOE,SAAP;AACD,CAtBD;AAwBA,eAAeL,eAAf","names":["React","createNavigator","ThemeColors","SafeAreaView","DrawerRouter","DrawerView","DrawerItems","defaultContentComponent","props","ScrollView","alwaysBounceVertical","forceInset","top","horizontal","DefaultDrawerConfig","drawerWidth","Dimensions","get","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","contentComponent","drawerPosition","I18nManager","isRTL","keyboardDismissMode","drawerBackgroundColor","light","bodyContent","dark","overlayColor","drawerType","hideStatusBar","statusBarAnimation","DrawerNavigator","routeConfigs","config","mergedConfig","drawerRouter","navigator"],"sources":["createDrawerNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, ScrollView, I18nManager } from 'react-native';\nimport {\n  createNavigator,\n  ThemeColors,\n  SafeAreaView,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationRoute,\n} from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\nimport {\n  NavigationDrawerOptions,\n  NavigationDrawerProp,\n  NavigationDrawerConfig,\n  NavigationDrawerRouterConfig,\n  DrawerContentComponentProps,\n} from '../types';\n\nconst defaultContentComponent = (props: DrawerContentComponentProps) => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig: NavigationDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent,\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)',\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n};\n\nconst DrawerNavigator = (\n  routeConfigs: NavigationRouteConfigMap<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationDrawerConfig,\n    NavigationDrawerRouterConfig,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  > = {}\n) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n\n  // TODO: don't have time to fix it right now\n  const navigator = createNavigator(\n    DrawerView as any,\n    drawerRouter,\n    mergedConfig\n  );\n  return navigator;\n};\n\nexport default DrawerNavigator;\n"]},"metadata":{},"sourceType":"module"}