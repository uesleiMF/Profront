{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"activityState\", \"style\", \"enabled\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport * from \"./types\";\nvar ENABLE_SCREENS = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\nexport var NativeScreen = function (_React$Component) {\n  _inherits(NativeScreen, _React$Component);\n  var _super = _createSuper(NativeScreen);\n  function NativeScreen() {\n    _classCallCheck(this, NativeScreen);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        activityState = _this$props.activityState,\n        style = _this$props.style,\n        _this$props$enabled = _this$props.enabled,\n        enabled = _this$props$enabled === void 0 ? true : _this$props$enabled,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return React.createElement(View, _extends({\n        style: [style, ENABLE_SCREENS && enabled && activityState !== 2 ? {\n          display: 'none'\n        } : null]\n      }, rest));\n    }\n  }]);\n  return NativeScreen;\n}(React.Component);\nexport var Screen = Animated.createAnimatedComponent(NativeScreen);\nexport var ScreenContainer = View;\nexport var NativeScreenContainer = View;\nexport var ScreenStack = View;\nexport var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {\n  return React.createElement(View, null, React.createElement(Image, _extends({\n    resizeMode: \"center\",\n    fadeDuration: 0\n  }, props)));\n};\nexport var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderConfig = View;\nexport var ScreenStackHeaderSubview = View;\nexport var shouldUseActivityState = true;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAAA;AAUA;AAEA,IAAIC,cAAc,GAAG,IAArB;AAEA,OAAO,SAASC,aAAT,GAAyD;EAAA,IAAlCC,mBAAmB,uEAAG,IAA7C;EACLF,cAAc,GAAGE,mBAAjB;AACD;AAED,OAAO,SAASC,cAAT,GAAmC;EACxC,OAAOH,cAAP;AACD;AAED,WAAaI,YAAN;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACLC,kBAAsB;MACpB,kBAAgE,KAAKC,KAArE;QAAMC,MAAF,eAAEA,MAAF;QAAUC,aAAV,eAAUA,aAAV;QAAyBC,KAAzB,eAAyBA,KAAzB;QAAA,kCAAgCC,OAAO;QAAPA,OAAO,oCAAG,IAA1C;QAAmDC;MACvD,IAAIJ,MAAM,KAAKK,SAAX,IAAwBJ,aAAa,KAAKI,SAA9C,EAAyD;QACvDJ,aAAa,GAAGD,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmB,CAAnC;MACD;MACD,OACER,oBAACc,IAAD;QACEJ,KAAK,EAAE,CACLA,KADK,EAELT,cAAc,IAAIU,OAAlB,IAA6BF,aAAa,KAAK,CAA/C,GACI;UAAEM,OAAO,EAAE;QAAX,CADJ,GAEI,IAJC;MADT,GAOMH,IAPN,EADF;IAWD;EAAA;EAAA;AAAA,EAjB+BZ,KAAK,CAACgB,SAAjC;AAoBP,OAAO,IAAMC,MAAM,GAAGC,QAAQ,CAACC,uBAAT,CAAiCd,YAAjC,CAAf;AAEP,OAAO,IAAMe,eAA0D,GAAGN,IAAnE;AAEP,OAAO,IAAMO,qBAAgE,GAAGP,IAAzE;AAEP,OAAO,IAAMQ,WAAkD,GAAGR,IAA3D;AAEP,OAAO,IAAMS,gCAAgC,GAC3ChB,SADWgB,gCAAgC,CAC3ChB,KAD8C;EAAA,OAG9CP,oBAACc,IAAD,QACEd,oBAACwB,KAAD;IAAOC,UAAU,EAAC,QAAlB;IAA2BC,YAAY,EAAE;EAAzC,GAAgDnB,KAAhD,EADF,CAHK;AAAA;AAQP,OAAO,IAAMoB,0BAA0B,GACrCpB,SADWoB,0BAA0B,CACrCpB,KADwC;EAAA,OAExBP,oBAACc,IAAD,EAAUP,KAAV,CAFX;AAAA;AAIP,OAAO,IAAMqB,yBAAyB,GACpCrB,SADWqB,yBAAyB,CACpCrB,KADuC;EAAA,OAEvBP,oBAACc,IAAD,EAAUP,KAAV,CAFX;AAAA;AAIP,OAAO,IAAMsB,2BAA2B,GACtCtB,SADWsB,2BAA2B,CACtCtB,KADyC;EAAA,OAEzBP,oBAACc,IAAD,EAAUP,KAAV,CAFX;AAAA;AAIP,OAAO,IAAMuB,uBAA0E,GAAGhB,IAAnF;AAEP,OAAO,IAAMiB,wBAEX,GAAGjB,IAFE;AAIP,OAAO,IAAMkB,sBAAsB,GAAG,IAA/B","names":["React","ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","NativeScreen","render","props","active","activityState","style","enabled","rest","undefined","View","display","Component","Screen","Animated","createAnimatedComponent","ScreenContainer","NativeScreenContainer","ScreenStack","ScreenStackHeaderBackButtonImage","Image","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["index.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n} from './types';\n\nexport * from './types';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let { active, activityState, style, enabled = true, ...rest } = this.props;\n    if (active !== undefined && activityState === undefined) {\n      activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n    }\n    return (\n      <View\n        style={[\n          style,\n          ENABLE_SCREENS && enabled && activityState !== 2\n            ? { display: 'none' }\n            : null,\n        ]}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}